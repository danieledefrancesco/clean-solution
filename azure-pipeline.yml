variables:
  - group: clean-solution
  - name: 'vmImageName'
    value: 'ubuntu-20.04'
  - name: 'workingDirectory'  
    value: '$(System.DefaultWorkingDirectory)'
  
stages:
  - stage: build_and_tag
    displayName: Build and Tag SDK and WEB images

    jobs:
 
      - job: build_sdk
        displayName: Build and Tag SDK image
        pool:
          vmImage: $(vmImageName)

        steps:
          - task: DockerInstaller@0
            displayName: Install docker
            inputs:
              dockerVersion: '17.09.0-ce'

          - task: Bash@3
            displayName: Build and Tag SDK Image
            inputs:
              targetType: 'inline'
              script: |
                make build_and_tag_sdk version=$(Build.BuildNumber) docker_username=$(docker_username)

          - task: Bash@3
            displayName: Run Unit Tests and Sonar Scan
            inputs:
              targetType: 'inline'
              script: |
                make run_sonar_scan
                
      - job: build_web
        displayName: Build and Tag Web image
        pool:
          vmImage: $(vmImageName)

        steps:
          - task: DockerInstaller@0
            displayName: Install docker
            inputs:
              dockerVersion: '17.09.0-ce'

          - task: Bash@3
            displayName: Build and Tag Web Image
            inputs:
              targetType: 'inline'
              script: |
                make build_and_tag_web version=$(Build.BuildNumber) docker_username=$(docker_username)

          - task: Bash@3
            displayName: Run Behavioral Tests
            inputs:
              targetType: 'inline'
              script: |
                make behavioral_tests

      - job: publish_artifact
        displayName: Publish Artifacts
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: Bash@0
            displayName: Prepare Artifact Folder
            inputs:
              targetType: 'inline'
              script: |
                mkdir artifact
                if [ -d "test-report" ]
                then
                  cp -r test-report artifact
                fi
                if [ -d "sonar-report" ]
                then
                  cp -r sonar-report artifact
                fi
                if [ -d  "test/behavioral/target" ]
                then
                  cp -r test/behavioral/target artifact
                fi
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: 'artifact'
              artifact: 'drop'
              publishLocation: 'pipeline'
